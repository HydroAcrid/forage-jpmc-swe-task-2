From bdc8c129e64f2f8ff5b8226ba7f80da4c677998d Mon Sep 17 00:00:00 2001
From: HydroAcrid <kevindotel21@gmail.com>
Date: Sun, 28 May 2023 13:30:45 -0400
Subject: [PATCH] completed task 2

---
 src/App.tsx   | 32 +++++++++++++++++++++++++-------
 src/Graph.tsx | 14 ++++++++++++--
 2 files changed, 37 insertions(+), 9 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..cc9b8ad 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,12 +2,14 @@ import React, { Component } from 'react';
 import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
+import { Server, ServerResponse } from 'http';
 
 /**
  * State declaration for <App />
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean;
 }
 
 /**
@@ -18,10 +20,11 @@ class App extends Component<{}, IState> {
   constructor(props: {}) {
     super(props);
 
-    this.state = {
+    this.state = { //this.state = data: [], showGraph: false, };
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +32,33 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if(this.state.showGraph) {
+      return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+    // DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    //   // Update the state by creating a new array of data that consists of
+    //   // Previous data in the state and the new data from server
+    //   this.setState({ data: [...this.state.data, ...serverResponds] });
+    // });
+      let x = 0;
+      const interval = setInterval(() => {
+        DataStreamer.getData((ServerResponds: ServerRespond[]) => {
+          this.setState({
+            data: ServerResponds,
+            showGraph: true,
+          });
+        });
+      x++;
+      if(x > 1000) {
+        clearInterval(interval);
+      }
+    }, 100);
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..ffa26f1 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,8 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    //const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -48,6 +49,15 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
       // Add more Perspective configurations here.
+      elem.setAttribute('view', 'y_line');
+      elem.setAttribute('column-pivots', '["stock"]');
+      elem.setAttribute('row-pivots', '["timestamp"]');
+      elem.setAttribute('columns', '["top_ask_price"]');
+      elem.setAttribute('aggregates',`
+        {"stock":"distinct count",
+        "top_ask_price":"avg",
+        "top_bid_price":"avg",
+        "timestamp":"distinct count"}`);
       elem.load(this.table);
     }
   }
-- 
2.39.0.windows.1

